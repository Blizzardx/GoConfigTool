// Generated by gen-tool
// DO NOT EDIT!
package config

import (
	"errors"
	"fmt"
	"github.com/Blizzardx/GoConfigTool/common"
	"strconv"
)

func parserConfig_BasicItem_CommonConfig(decoder common.ConfigDecoder, configContent [][]string) ([]byte, error) {

	table := &BasicItem_CommonConfig{}
	for line, lineContent := range configContent {
		lineElem, err := parserLine_BasicItem_CommonConfig(lineContent)
		if nil != err {
			str := fmt.Sprintf("error on load config itemConfigTable at line: " + strconv.Itoa(line+1) + " " + err.Error())
			return nil, errors.New(str)
		}
		table.Content = append(table.Content, lineElem)
	}

	content, err := decoder.Encode(table)
	if nil != err {
		return nil, err
	}
	return content.([]byte), nil
}
func parserLine_BasicItem_CommonConfig(lineContent []string) (*BasicItem_CommonLineInfo, error) {
	line := &BasicItem_CommonLineInfo{}
	var err error = nil
	columnIndex := 0

	err = common.Parser_int32(lineContent[columnIndex], &line.Id)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Id " + err.Error())
	}

	err = common.CheckValueLimit_int32(line.Id, "", "")
	if err != nil {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Id error on check min and max" + err.Error())
	}

	columnIndex++

	err = common.Parser_string(lineContent[columnIndex], &line.Icon)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Icon " + err.Error())
	}

	columnIndex++

	columnIndex++

	err = common.Parser_int32(lineContent[columnIndex], &line.Quality)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Quality " + err.Error())
	}

	err = common.CheckValueLimit_int32(line.Quality, "1", "5")
	if err != nil {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Quality error on check min and max" + err.Error())
	}

	columnIndex++

	err = common.Parser_int32(lineContent[columnIndex], &line.Price)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Price " + err.Error())
	}

	err = common.CheckValueLimit_int32(line.Price, "", "")
	if err != nil {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Price error on check min and max" + err.Error())
	}

	columnIndex++

	err = common.Parser_int32(lineContent[columnIndex], &line.LimitNum)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named LimitNum " + err.Error())
	}

	err = common.CheckValueLimit_int32(line.LimitNum, "", "")
	if err != nil {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named LimitNum error on check min and max" + err.Error())
	}

	columnIndex++

	err = common.Parser_int32(lineContent[columnIndex], &line.Acauire)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Acauire " + err.Error())
	}

	err = common.CheckValueLimit_int32(line.Acauire, "", "")
	if err != nil {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named Acauire error on check min and max" + err.Error())
	}

	columnIndex++

	err = common.Parser_string(lineContent[columnIndex], &line.ConsumeItem)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named ConsumeItem " + err.Error())
	}

	columnIndex++

	err = common.Parser_int32(lineContent[columnIndex], &line.ConsumeCoin)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named ConsumeCoin " + err.Error())
	}

	err = common.CheckValueLimit_int32(line.ConsumeCoin, "", "")
	if err != nil {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named ConsumeCoin error on check min and max" + err.Error())
	}

	columnIndex++

	err = common.Parser_int32(lineContent[columnIndex], &line.FormatIndex)
	if nil != err {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named FormatIndex " + err.Error())
	}

	err = common.CheckValueLimit_int32(line.FormatIndex, "", "")
	if err != nil {
		return nil, errors.New(" column " + strconv.Itoa(columnIndex) + " named FormatIndex error on check min and max" + err.Error())
	}

	columnIndex++

	return line, nil
}
